
import cv2
import matplotlib.pyplot as plt


# Read the image file car1.jpg, car2.jpg
img = cv2.imread('/Python_program/Car_plate/car1.jpg')

#show image
cv2.imshow(" Color image",img)

#convert my image to grayscale
gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
cv2.imshow(" Gray image",gray)

#perform adaptive threshold so that I can extract proper contours from the image
#need this to extract the name plate from the image. 
thresh = cv2.adaptiveThreshold(gray,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2)
cv2.imshow(" contours image",thresh)


contours,h = cv2.findContours(thresh,1,2)
#once I have the contours list, i need to find the contours which form rectangles.
#the contours can be approximated to minimum polygons, polygons of size 4 are probably rectangles
#print(contours)
largest_rectangle = [0,0]
for cnt in contours:
    approx = cv2.approxPolyDP(cnt,0.01*cv2.arcLength(cnt,True),True)
    if len(approx)==4: #polygons with 4 points is what I need.
        area = cv2.contourArea(cnt)
        if area > largest_rectangle[0]:
            #find the polygon which has the largest size.
            largest_rectangle = [cv2.contourArea(cnt), cnt, approx]

x,y,w,h = cv2.boundingRect(largest_rectangle[1])
print(x,y,w,h)
#crop the rectangle to get the number plate Region of interset using list ROI.
roi=img[y:y+h,x:x+w]
#roi.show()
#cv2.drawContours(img,[largest_rectangle[1]],0,(0,0,255),-1)
#colorMaps .
plt.imshow(roi, cmap = 'gray')
plt.show()
cv2.waitKey(0)
